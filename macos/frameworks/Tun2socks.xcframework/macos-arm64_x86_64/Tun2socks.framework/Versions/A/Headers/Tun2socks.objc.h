// Objective-C API for talking to github.com/Jigsaw-Code/outline-apps/client/go/outline/tun2socks Go package.
//   gobind -lang=objc github.com/Jigsaw-Code/outline-apps/client/go/outline/tun2socks
//
// File is generated by gobind. Do not edit.

#ifndef __Tun2socks_H__
#define __Tun2socks_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Outline.objc.h"
#include "Platerrors.objc.h"

@class Tun2socksConnectOutlineTunnelResult;
@protocol Tun2socksTunWriter;
@class Tun2socksTunWriter;
@protocol Tun2socksTunnel;
@class Tun2socksTunnel;

@protocol Tun2socksTunWriter <NSObject>
- (BOOL)close:(NSError* _Nullable* _Nullable)error;
- (BOOL)write:(NSData* _Nullable)p0 n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

@protocol Tun2socksTunnel <NSObject>
/**
 * Disconnect closes the underlying resources. Subsequent Write calls will fail.
 */
- (void)disconnect;
/**
 * IsConnected is true if Disconnect has not been called.
 */
- (BOOL)isConnected;
/**
 * UpdateUDPSupport determines if UDP is supported following a network connectivity change.
Sets the tunnel's UDP connection handler accordingly, falling back to DNS over TCP if UDP is not supported.
Returns whether UDP proxying is supported in the new network.
 */
- (BOOL)updateUDPSupport;
/**
 * Write writes input data to the TUN interface.
 */
- (BOOL)write:(NSData* _Nullable)data ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ConnectOutlineTunnelResult represents the result of [ConnectOutlineTunnel].

We use a struct instead of a tuple to preserve a strongly typed error that gobind recognizes.
 */
@interface Tun2socksConnectOutlineTunnelResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) id<Tun2socksTunnel> _Nullable tunnel;
@property (nonatomic) PlaterrorsPlatformError* _Nullable error;
@end

/**
 * ConnectOutlineTunnel reads packets from a TUN device and routes it to an Outline proxy server.
Returns an OutlineTunnel instance that should be used to input packets to the tunnel.

`tunWriter` is used to output packets to the TUN (VPN).
`client` is the Outline client (created by [outline.NewClient]).
`isUDPEnabled` indicates whether the tunnel and/or network enable UDP proxying.

Sets an error if the tunnel fails to connect.
 */
FOUNDATION_EXPORT Tun2socksConnectOutlineTunnelResult* _Nullable Tun2socksConnectOutlineTunnel(id<Tun2socksTunWriter> _Nullable tunWriter, OutlineClient* _Nullable client, BOOL isUDPEnabled);

// skipped function NewTCPHandler with unsupported parameter or return types


// skipped function NewUDPHandler with unsupported parameter or return types


@class Tun2socksTunWriter;

@class Tun2socksTunnel;

/**
 * TunWriter is an interface that allows for outputting packets to the TUN (VPN).
 */
@interface Tun2socksTunWriter : NSObject <goSeqRefInterface, Tun2socksTunWriter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)close:(NSError* _Nullable* _Nullable)error;
- (BOOL)write:(NSData* _Nullable)p0 n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Tunnel represents a tunnel from a TUN device to a server.
 */
@interface Tun2socksTunnel : NSObject <goSeqRefInterface, Tun2socksTunnel> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Disconnect closes the underlying resources. Subsequent Write calls will fail.
 */
- (void)disconnect;
/**
 * IsConnected is true if Disconnect has not been called.
 */
- (BOOL)isConnected;
/**
 * UpdateUDPSupport determines if UDP is supported following a network connectivity change.
Sets the tunnel's UDP connection handler accordingly, falling back to DNS over TCP if UDP is not supported.
Returns whether UDP proxying is supported in the new network.
 */
- (BOOL)updateUDPSupport;
/**
 * Write writes input data to the TUN interface.
 */
- (BOOL)write:(NSData* _Nullable)data ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

#endif
