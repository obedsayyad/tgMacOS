// Objective-C API for talking to github.com/Jigsaw-Code/outline-apps/client/go/outline Go package.
//   gobind -lang=objc github.com/Jigsaw-Code/outline-apps/client/go/outline
//
// File is generated by gobind. Do not edit.

#ifndef __Outline_H__
#define __Outline_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Platerrors.objc.h"

@class OutlineClient;
@class OutlineClientConfig;
@class OutlineGoBackendConfig;
@class OutlineIPTablePacketDialer;
@class OutlineIPTablePacketListenerDialer;
@class OutlineIPTableStreamDialer;
@class OutlineInvokeMethodResult;
@class OutlineNewClientResult;
@class OutlineProviderClientConfig;
@class OutlineProviderErrorConfig;
@class OutlineProviderTunnelConfig;
@class OutlineTCPAndUDPConnectivityResult;

/**
 * Client provides a transparent container for [transport.StreamDialer] and [transport.PacketListener]
that is exportable (as an opaque object) via gobind.
It's used by the connectivity test and the tun2socks handlers.
TODO(fortuna):
  - Add connectivity test to StartSession()
  - Add NotifyNetworkChange() method. Needs to hold a network.PacketProxy instead of config.PacketListener
    to handle that.
  - Refactor so that StartSession returns a Client
 */
@interface OutlineClient : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method Client.DialStream with unsupported parameter or return types

- (BOOL)endSession:(NSError* _Nullable* _Nullable)error;
// skipped method Client.ListenPacket with unsupported parameter or return types

- (BOOL)startSession:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ClientConfig is used to create a session Client.
 */
@interface OutlineClientConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull dataDir;
// skipped field ClientConfig.TransportParser with unsupported type: *github.com/Jigsaw-Code/outline-apps/client/go/configyaml.TypeParser[*github.com/Jigsaw-Code/outline-apps/client/go/outline/config.TransportPair]

/**
 * New creates a new session client. It's used by the native code, so it returns a NewClientResult.
 */
- (OutlineNewClientResult* _Nullable)new:(NSString* _Nullable)keyID providerClientConfigText:(NSString* _Nullable)providerClientConfigText;
@end

@interface OutlineGoBackendConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull dataDir;
@end

/**
 * IPTablePacketDialer is a [transport.PacketDialer] that routes connections
based on the destination IP address using an [iptable.IPTable].
If a specific route is found in the table, the corresponding dialer is used.
Otherwise, the default dialer (if set) is used.
 */
@interface OutlineIPTablePacketDialer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped constructor IPTablePacketDialer.NewIPTablePacketDialer with unsupported parameter or return types

// skipped method IPTablePacketDialer.DialPacket with unsupported parameter or return types

// skipped method IPTablePacketDialer.SetDefault with unsupported parameter or return types

@end

/**
 * IPTablePacketListenerDialer is a [transport.PacketDialer] that routes connections
based on the destination IP address using an [iptable.IPTable] containing
[transport.PacketListenerDialer] instances.

It allows different underlying [transport.PacketListener] instances to be used
based on the destination IP.
 */
@interface OutlineIPTablePacketListenerDialer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method IPTablePacketListenerDialer.DialPacket with unsupported parameter or return types

// skipped method IPTablePacketListenerDialer.SetDefault with unsupported parameter or return types

@end

/**
 * IPTableStreamDialer is a [transport.StreamDialer] that routes connections
based on the destination IP address using an [iptable.IPTable].
If a specific route is found in the table, the corresponding dialer is used.
Otherwise, the default dialer (if set) is used.
 */
@interface OutlineIPTableStreamDialer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped constructor IPTableStreamDialer.NewIPTableStreamDialer with unsupported parameter or return types

// skipped method IPTableStreamDialer.DialStream with unsupported parameter or return types

// skipped method IPTableStreamDialer.SetDefault with unsupported parameter or return types

@end

/**
 * InvokeMethodResult represents the result of an InvokeMethod call.

We use a struct instead of a tuple to preserve a strongly typed error that gobind recognizes.
 */
@interface OutlineInvokeMethodResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull value;
@property (nonatomic) PlaterrorsPlatformError* _Nullable error;
@end

/**
 * NewClientResult represents the result of [NewClientAndReturnError].

We use a struct instead of a tuple to preserve a strongly typed error that gobind recognizes.
 */
@interface OutlineNewClientResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) OutlineClient* _Nullable client;
@property (nonatomic) PlaterrorsPlatformError* _Nullable error;
@end

/**
 * ProviderClientConfig is the session config from the service provider.
 */
@interface OutlineProviderClientConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field ProviderClientConfig.Transport with unsupported type: github.com/Jigsaw-Code/outline-apps/client/go/configyaml.ConfigNode

// skipped field ProviderClientConfig.Reporter with unsupported type: github.com/Jigsaw-Code/outline-apps/client/go/configyaml.ConfigNode

@end

/**
 * ProviderErrorConfig is config returned by the provider with a custom error to
show to the user.
 */
@interface OutlineProviderErrorConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field ProviderErrorConfig.Error with unsupported type: *struct{Message string; Details string}

@end

/**
 * ProviderTunnelConfig is the config to fully configure the VPN.
 */
@interface OutlineProviderTunnelConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field ProviderTunnelConfig.ProviderClientConfig with unsupported type: github.com/Jigsaw-Code/outline-apps/client/go/outline.ProviderClientConfig

@end

/**
 * TCPAndUDPConnectivityResult represents the result of TCP and UDP connectivity checks.

We use a struct instead of a tuple to preserve a strongly typed error that gobind recognizes.
 */
@interface OutlineTCPAndUDPConnectivityResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) PlaterrorsPlatformError* _Nullable tcpError;
@property (nonatomic) PlaterrorsPlatformError* _Nullable udpError;
@end

/**
 * CloseVPN closes an existing VPN connection and restores network traffic to the default
network interface.
 - Input: null
 - Output: null
 */
FOUNDATION_EXPORT NSString* _Nonnull const OutlineMethodCloseVPN;
/**
 * EraseServiceStorage erases all file storage for the given service.
 - Input: the key ID of the service
 - Output: null
 */
FOUNDATION_EXPORT NSString* _Nonnull const OutlineMethodEraseServiceStorage;
/**
 * EstablishVPN initiates a VPN connection and directs all network traffic through Outline.

 - Input: a JSON string of vpn.configJSON.
 - Output: a JSON string of vpn.connectionJSON.
 */
FOUNDATION_EXPORT NSString* _Nonnull const OutlineMethodEstablishVPN;
/**
 * FetchResource fetches a resource located at a given URL.
 - Input: the URL string of the resource to fetch
 - Output: the content in raw string of the fetched resource
 */
FOUNDATION_EXPORT NSString* _Nonnull const OutlineMethodFetchResource;
/**
 * Parses the TunnelConfig and extracts the first hop or provider error as needed.
 - Input: the tunnel config text
 - Output: the TunnelConfigJson that Typescript needs
 */
FOUNDATION_EXPORT NSString* _Nonnull const OutlineMethodParseTunnelConfig;
/**
 * SetVPNStateChangeListener sets a callback to be invoked when the VPN state changes.

We recommend the caller to set this listener at app startup to catch all VPN state changes.
Users might start the VPN from system settings, bypassing the app;
so setting the listener when connecting within the app might miss some events.

 - Input: A callback token string.
 - Output: null
 */
FOUNDATION_EXPORT NSString* _Nonnull const OutlineMethodSetVPNStateChangeListener;

/**
 * CheckTCPAndUDPConnectivity checks if a [Client] can relay TCP and UDP traffic.

It parallelizes the execution of TCP and UDP checks, and returns a [TCPAndUDPConnectivityResult]
containing a TCP error and a UDP error.
If the connectivity check was successful, the corresponding error field will be nil.
 */
FOUNDATION_EXPORT OutlineTCPAndUDPConnectivityResult* _Nullable OutlineCheckTCPAndUDPConnectivity(OutlineClient* _Nullable client);

FOUNDATION_EXPORT OutlineGoBackendConfig* _Nullable OutlineGetBackendConfig(void);

/**
 * InvokeMethod calls a method by name.
 */
FOUNDATION_EXPORT OutlineInvokeMethodResult* _Nullable OutlineInvokeMethod(NSString* _Nullable method, NSString* _Nullable input);

// skipped function NewIPTablePacketDialer with unsupported parameter or return types


// skipped function NewIPTablePacketListener with unsupported parameter or return types


// skipped function NewIPTableStreamDialer with unsupported parameter or return types


// skipped function NewReporterParser with unsupported parameter or return types


#endif
